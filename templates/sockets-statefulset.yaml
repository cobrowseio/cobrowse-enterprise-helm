apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-sockets
  namespace: {{ .Release.Namespace | default "default" }}
  labels:
    component: sockets
    app: {{ template "fullname" . }}
    chart: {{ template "chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    stage: {{ .Values.stage | quote }}
spec:
  serviceName: {{ .Release.Name }}-sockets-headless
  replicas: {{ .Values.sockets.replicas | default "1" }}
  selector:
    matchLabels:
      component: sockets
      stage: {{ .Values.stage | quote }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/sockets-secret.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
      labels:
        app: {{ template "fullname" . }}
        component: sockets
        stage: {{ .Values.stage | quote }}
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-sockets-envvars
        - configMapRef:
            name: {{ .Release.Name }}-sockets-custom-envvars
            optional: true
        - secretRef:
            name: {{ .Release.Name }}-sockets-envvars
        - secretRef:
            name: {{ .Release.Name }}-sockets-custom-envvars
            optional: true
        image: {{ (.Values.sockets.image).ref | default (include "image" (dict "repo" .Values.image.repo "image" "cobrowse-api-sockets-enterprise:1.3.12" )) }}
        imagePullPolicy: {{ (.Values.sockets.image).pullPolicy }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /up
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: sockets
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /up
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: "/data"
          name: data-traces
        resources:
          limits:
            cpu: {{ .Values.sockets.cpu | default "256m" }}
            memory: {{ .Values.sockets.memory | default "256Mi" }}
          requests:
            cpu: {{ .Values.sockets.cpu | default "256m" }}
            memory: {{ .Values.sockets.memory | default "256Mi" }}
        securityContext:
          {{ include "defaultSecurityContext" . | nindent 10 }}
          runAsGroup: {{ (.Values.sockets.runAs).group | default "1000" }}
          runAsUser: {{ (.Values.sockets.runAs).user | default "1000" }}
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-cfg
      volumes:
      - name: data-traces
        persistentVolumeClaim:
          claimName: {{ (.Values.sockets.storage).persistentVolumeClaimName | default (printf "%s-sockets-pvc" .Release.Name) | quote }}
